trigger:
  branches:
    include:
      - main  # Trigger pipeline for changes to the "main" branch

pool:
  vmImage: 'ubuntu-latest'  # Use Ubuntu as the build agent

variables:
  buildConfiguration: 'Release'  # Specify build configuration
  appName: 'MyJavaApp'          # Application name
  system.debug: true            # Enable debug mode for detailed logs

steps:
- checkout: self  # Ensure the repository is checked out

- script: |
    echo "Debugging Workspace..."
    echo "Listing contents of $(System.DefaultWorkingDirectory):"
    ls -la $(System.DefaultWorkingDirectory)
  displayName: 'Debug Workspace Contents'

- task: Maven@3  # Build the Java application with Maven
  inputs:
    mavenPomFile: 'pom.xml'  # Ensure this points to the correct location of pom.xml
    goals: 'clean package'
    options: '-DskipTests'  # Optional: Skip tests during the build process
  timeoutInMinutes: 120  # Ensure this step has sufficient time to complete
  displayName: 'Build Java Application with Maven'

- script: |
    echo "Debugging Build Output..."
    echo "Listing contents of the target folder after Maven build:"
    ls -la $(System.DefaultWorkingDirectory)/target
  displayName: 'Verify Target Directory After Build'

- task: PublishBuildArtifacts@1  # Publish the built artifact (e.g., .jar file)
  inputs:
    # IMPORTANT: Adjust pathToPublish based on the output of the
    # "Verify Target Directory After Build" step. If your .jar file is in a
    # subdirectory within 'target', update this path accordingly.
    # Example if the .jar is directly in 'target':
    pathToPublish: '$(System.DefaultWorkingDirectory)/target/*.jar'
    # Example if the .jar is in a subdirectory like 'target/dist':
    # pathToPublish: '$(System.DefaultWorkingDirectory)/target/dist/*.jar'
    # Example for recursively finding .jar files under 'target':
    # pathToPublish: '$(System.DefaultWorkingDirectory)/target/**/*.jar'
    artifactName: 'java-artifact'
  timeoutInMinutes: 60  # Allocate appropriate time for artifact publishing
  displayName: 'Publish Build Artifacts'

- script: |
    echo "Debugging Artifact Staging Directory..."
    echo "Listing contents of $(Build.ArtifactStagingDirectory):"
    ls -la $(Build.ArtifactStagingDirectory)
  displayName: 'Verify Artifact Publishing Directory'

- task: AzureWebApp@1  # Deploy to Azure Web App using service connection
  inputs:
    azureSubscription: 'java-service-connection'  # Service connection name
    appName: $(appName)                              # Name of the Azure Web App
    # IMPORTANT: Adjust the package path based on how the artifact was published.
    # If you published the .jar file directly under 'java-artifact':
    package: '$(Build.ArtifactStagingDirectory)/java-artifact/*.jar'
    # If you published a directory containing the .jar file:
    # package: '$(Build.ArtifactStagingDirectory)/java-artifact/your-app.jar'
    # (Replace 'your-app.jar' with the actual name of your .jar file)
    # If you are deploying a .war file, ensure the extension matches.
  timeoutInMinutes: 120  # Ensure deployment has sufficient time
  displayName: 'Deploy Java Application to Azure Web App'

- script: |
    echo "Deployment process completed successfully!"
  displayName: 'Finalize Deployment Process'
